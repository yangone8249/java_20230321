package day18;

import java.util.ArrayList;

public class LambdaEx {

	public static void main(String[] args) {
		// Lambda expression : 람다식 (JS에서 사용하는 문법)
		/* 함수형 프로그램이다. (Functional Programming : FP)
		 * 순수한 함수를 구현하고 호출함으로써 외부 자료에 영향을 끼치지 않는다.
		 * 부수적인 영향 (side effect)을 주지 않도록 구현하는 방식.
		 * 순수함수 (pure function) : 매개변수만을 사용하여 만드는 함수, 
		 * 즉 함수 내부에서 함수외부에 있는 변수를 사용하지 않아 함수가 실행되더라도 외부에 영향을 주지 않는 형태
		 * 
		 */
		/*
		 * (int x, int y) -> {return x+y}
		 * int x -> {return x+y};
		 * 
		 * return 없으면 중괄호 생략 가능.
		 * 예) str -> System.out.print(str);
		 */
		int result = add(3,5);
		System.out.println(result);

		ArrayList<Integer> number = new ArrayList<>();
		number.add(10);
		number.add(20);
		number.add(5);
		number.add(30);
		number.add(15);
		//우리가 아는 향상된 for문으로 출력
		for(Integer i : number) {
			System.out.print(i+" ");
		}
		System.out.println();
		
		//Lambda 형태로 출력
		System.out.println("---람다식---");
		//forEach는 향상된 for문이다.
		number.forEach((n)->{ // n은 number의 대한 변수명이다. (변수명은 마음대로 지정)
			System.out.print(n+" "); // forEach((n이 들어오면) -> {여기서 함수를 처리})
		});
		System.out.println();
		
		//
		number.forEach(System.out::println);
		System.out.println("---number List의 총 개수---");
		System.out.println(number.stream().count());
		
	}
	
	public static int add(int x, int y) {
		return x+y;
	}

}
